== Hello World

[source,java]
.SuccinctHelloWorld.java
----
public class SuccinctHelloWorld {
    public static void main(final String... args) {
        System.out.printf("hello, world%n");
    }
}
----

가능한 한 Hello World 로 첫 장을 시작하고 싶지는 않았지만 비교적 간단하고 명확한 요구사항을 바탕으로 프로젝트를 설계하고 구현하는 방법을 알아보기에 더 없이 적절한 주제가 아닐 수 없다. 이 장에서는 인터페이스를 정의하는 방법을 알아보고 그 인터페이스를 구현하고 사용하는 방법에 대해 알아본다.

=== hello-world-api

`"hello, world"` 문자열을 생성하기 위한 API 가 정의된 모듈이다.

==== SuccinctHelloworld.java

위에 있는 코드를 담고 있는 소스코드이다. 다음과 같이 실행해 보자.

[source,text]
----
$ pwd
/.../path/to/.../verbose-java/hello-world-api

$ mvn -q compile exec:java
hello, world

$
----

==== HelloWorld.java

본 장에서 구현해 볼 인터페이스이다. 다음과 같이 한 개의 필드와 한 개의 메서드가 정의되어 있다.

[source,java]
.HelloWorld.java
----
@FunctionalInterface // <1>
public interface HelloWorld {

    // "hello, world"를 US-ASCII 문자셋으로 표현하기 위한 바이트 개수.
    int BYTES = "hello, world".getBytes(US_ASCII).length;

    // 주어진 배열(array)의 명시된 위치(offset)부터 "hello, world"를 기록한다.
    // array가 null 이면 NullPointerException을 던진다.
    // offset이 음수이면 IndexOutOfBoundsException을 던진다.
    // (offset + BYTES) 가 array.length 보다 크면 IndexOutOfBoundsException을 던진다.
    void set(byte[] array, int offset);
}
----
<1> 구현해야 할 메서드가 한 개밖에 없다는 것을 확인하기 위해 `@FunctionalInterface` 어노데이션을 달았다.

[NOTE]
====
인터페이스에 선언된 모든 필드는 암묵적으로 `public`, `static`, 그리고 `final` 이다. +
 [http://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.3[JLS 9.3. Field (Constant) Declarations]]
====

[NOTE]
====
인터페이스에 선언된 모든 메서드는 암묵적으로 `public` 이다. +
 [http://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.4[JLS 9.4. Method Declarations]]
====

===== set(byte[], int)
우리가 구현해 볼 메서드이다. 적절한 인자가 제공되었을 때 아래와 같이 값이 배열에 저장된다.

[source,text]
----
index  0   offset                  offset + 12     array.length - 1
       |   |                       |               |
       - - - - - - - - - - - - - - - - - - - - - - -
array      h e l l o ,   w o r l d
       - - - - - - - - - - - - - - - - - - - - - - -
----

`HelloWorld` 인터페이스에는 위에 정의된 필드와 메서드 외에 몇 개의 `default` 메서드들이 정의되어 있다.

===== write(OutputStream)

주어진 `OutputStream` 에 `hello, world` 바이트들을 기록한 후 그 스트림을 반환한다.

[source,java]
.HelloWorld.java#write(OutputStream)
----
    // 주어진 스트림에 hello, world 바이트들을 기록한 후 그 스트림을 반환한다.
include::codes/hello-world-api/src/main/java/com/github/jinahya/verbose/hello/HelloWorld.java[lines=64..74]
----
<1> `stream` 인자가 `null` 이면 `NullPointerException` 을 던진다.
<2> 적당한 (혹은 꼭 알맞은) 크기의 배열(`array`) 하나와
<3> `offset`으로 사용할 값(`0`)을 하나 생성하고
<4> `set(byte[], int)` 메서드에 그 값들을 전달한다.
<5> {apidocs-javase}/java/io/OutputStream.html#write-byte:A-[`OutputStream#write(byte[\])`] 메서드를 이용해 `array`에 채워진 값을 `stream`에 기록한다.
<6> 주어진 `stream` 을 반환한다.

===== put(ByteBuffer)

[source,java]
.HelloWorld.java#put(ByteBuffer)
----
    // 주어진 퍼버에 hello, world 바이트들을 담은 후 그 버퍼를 반환한다.
    // 버버에 충분한 공간이 없으면 BufferOverflowException 을 던진다.
    // 주어진 버퍼(buffer)를 반환한다.
    // 반환되는 버퍼의 위치(position) 값이 BYTES 만큼 증가된다.
include::codes/hello-world-api/src/main/java/com/github/jinahya/verbose/hello/HelloWorld.java[lines=90..106]
----
<1> `buffer` 인자가 `null` 이면 `NullPointerException` 을 던진다.
<2> `buffer`에 값을 채워 넣을 수 있는 공간이 충분치 않으면 `BufferOverflowException` 을 던진다.
<3> `buffer`가 내부적으로 배열을 사용한다면 `set(byte[], int)` 메서드에 그 배열을 직접 전달하여 값을 기록한 후 버퍼의 위치(`position`)를 임의로 `BYTES` 만큼 증가시킨 후 반환한다.
<4> (버퍼가 내부적으로 배열을 사용하고 있지 않다면) 배열을 하나 생성하고 `set(byte[], int)` 메서드를 이용해 값을 채운 후,
<5> 배열을 버퍼에 기록한다. (버퍼의 `position` 값이, 자동으로, 배열 길이만큼 증가한다.)

===== wirte(WritableByteChannel)

주어진 `WritableByteChannel` 에 `hello, world` 바이트들을 기록한 후 그 채널객체를 반환하는 메서드이다.

[source,java]
.HelloWorld.java#write(WritableByteChannel)
----
    // 주어진 채널에 hello, world 바이트들을 기록한 후 그 채널을 반환한다.
include::codes/hello-world-api/src/main/java/com/github/jinahya/verbose/hello/HelloWorld.java[lines=122..133]
----
<1> `channel` 인자가 `null` 이면 `NullPointerException` 을 던진다.
<2> 버퍼를 하나 생성하고 `put(ByteBuffer)` 메서드를 이용해 값을 채운다.
<3> 버퍼를 읽기 상태로 전환한 후,
<4> 버퍼에 (기록할) 값이 남아있는 동안,
<5> `channel` 에 기록한다.

NOTE: {apidocs-javase}/java/nio/channels/WritableByteChannel.html[`WritableByteChannel`] 인터페이스를 구현한 클래스들 중에는 내부적인 상태 혹은 설정에 따라 {apidocs-javase}/java/nio/channels/WritableByteChannel.html#write-java.nio.ByteBuffer-[`write(ByteBuffer)`] 메서드에서 버퍼 남아 있는 모든 (기록 가능한) 바이트들을 한번에 기록하지 않을 수도 있다.

==== HelloWorldTest.java

`HelloWorld` 인터페이스의 기능을 시험해볼 수 있는 클래스이다. 인터페이스를 위한 단위시험을 수행한다는 것이 의외일 수도 있지만 `HelloWorld` 인터페이스에 구현된 `default` 메서드들이 정상적으로 동작하는지 미리 확인해 둘 필요가 있다.

[source,java]
.HelloWorldTest.java
----
public class HelloWorldTest {
    // @todo: add test cases
}
----
시험을 수행하기 위해서는 (`default` 메서드들을 호출하고 결과를 확인해 볼 수 있는) `HelloWorld` 객체가 필요하다. 다만 여기서 시험해 볼 범위는 `default` 메서드들 자체에 한정한다. `set(byte[], int)` 메서드가 어떻게 동작하는지를 확인할 필요는 없다.

`defualt` 메서드들을 시험하기 위해 다음과 같이 `HelloWorld` 객체를 반환하는 메서드를 정의하자.
[source,java]
.HelloWorldTest.java#mock()
----
include::codes/hello-world-api/src/test/java/com/github/jinahya/verbose/hello/HelloWorldTest.java[lines=47..51]
----
<1> 아무런 동작도 하지 않는다.

====
`HelloworldTest#mock()` 메서드는 `HelloWorld` 형의 객체를 반환하기 위해 lambda 표현식을 사용하였다. 여기서 사용된 lambda 표현식을 이해하기 위해 동일한 기능을 수행하는 방식들을 따라가 보자.

우선 다음과 같이 `HelloWorld` 인터페이스를 구현하는 클래스를 정의하고 그 객체를 반환할 수 있다.

[source,java]
----
    private static class Mock implements HelloWorld {
        @Override
        public void set(byte[] array, int offset) {
            // does nothing
        }
    }
    private HelloWorld mock() {
        return new Mock();
    }
----

다음과 같이 익명(anonymous)의 클래스를 이용할 수도 있다.

[source,java]
----
    private HelloWorld mock() {
        return new HelloWorld() {
            @Override
            public void set(byte[] array, int offset) {
                // does nothing
            }
        }
    }
----

`HelloWorld` 인터페이스는 구현해야 할 메서드가 하나(`set(byte[], int)`)밖에 없는 `@FunctionalInterface` 이므로 다음과 같이 lambda 표현식을 사용할 수 있다.

[source,java]
----
    private HelloWorld mock() {
        return (byte[] a, int o) -> {
            // does nothing
        };
    }
----

`set(byte[], int)` 메서드의 인자들의 형(type)이 추론(infer)될 수 있으므로 다음과 같이 형이 생략될 수 있다.

[source,java]
----
    private HelloWorld mock() {
        return (a, o) -> {
            // does nothing
        };
    }
----
====

===== testWriteStream()

다음은 `write(OutputStream)` 메서드를 시험하는 항목이다.

[source,java]
.HelloWorldTest.java#testWriteStream()
----
include::codes/hello-world-api/src/test/java/com/github/jinahya/verbose/hello/HelloWorldTest.java[lines=58..70]
----
<1> `stream` 값이 `null` 이면 `NullPointerException` 을 던지는지 확인한다.
<2> 유효한 `OutputStream` 값을 `write(OutputStream)` 에 전달한다.
<3> 전달한 값을 반환하는지 확인한다.

해당 메서드(`write(OutputStream)`) 가 올바르게 동작하는 지를 확인했을 뿐, 전달된 `OutputStream` 에 어떤 값이 기록되었는지는 확인하지 않는다.

===== testPut()

이제 다음과 같이 `put(ByteBuffer)` 메서드를 테스트 하자.

[source,java]
.HelloWorldTest.java#testPut()
----
include::codes/hello-world-api/src/test/java/com/github/jinahya/verbose/hello/HelloWorldTest.java[lines=75..93]
----
<1> `buffer` 값이 `null` 이면 `NullPointerException` 을 던지는지 확인한다.
<2> `buffer.remaining()` 값이 `HelloWorld#BYTES(12)` 보다 작을 때 `BufferOverflowException` 을 던지는지 확인한다.
<3> 내부적으로 `byte[]` 를 사용하는 버퍼를 생성하고 `put` 메서드를 호출한 후 전달한 버퍼를 반환하는지, 그리고 전달한 버퍼의 `position` 값이 `BYTES` 만큼 증가했는지를 확인한다.
<4> 내부적으로 `byte[]` 를 사용하지 않는 버퍼를 생성하고 `put` 메서드를 호출한 후 위 사항과 동일간 조건으로 확인한다.

보는 바와 같이 `put(ByteBufer)` 메서드가 에러 없이 동작하는지를 시험했을 뿐 전달한 `buffer` 에 어떤 값이 들어갔는지는 확인하지 않는다.

====
{apidocs-testng}/org/testng/Assert.html#assertThrows-java.lang.Class-org.testng.Assert.ThrowingRunnable-[`org.testng.Assert.assertThrows`] 메서드의 두번째 인자의 형인 {apidocs-testng}/org/testng/Assert.ThrowingRunnable.html[`ThrowingRunnable`] 인터페이스에는 단 하나의 메서드만이 정의되어 있다. 다시 한번 동일한 기능을 수행하는 코드들을 살펴보자.

아래는 익명 클래스를 사용하는 코드이다.

[source,java]
----
assertThrows(NullPointerException.class, new ThrowingRunnable() {
    @Override public void run() throws Throwable {
        mock().put(null);
    }
});
----

다음과 같이 lambda 표현식을 사용할 수 있다.

[source,java]
----
assertThrows(NullPointerException.class, () -> {
    mock().put(null);
});
----

서술문(statement)이 하나밖에 없으므로 바디 블럭을 최소화할 수 있다.

[source,java]
----
assertThrows(NullPointerException.class, () -> mock().put(null)); // <1>
----
<1> `mock().put(null)` 바로 뒤에 서술문의 끝을 나타내는 세미콜론(`;`)이 없다.
====

===== testWriteChannel()

다음은 `write(WritableByteChannel)` 메서드를 시험한다.
[source,java]
.HelloWorldTest.java#testWriteChannel()
----
include::codes/hello-world-api/src/test/java/com/github/jinahya/verbose/hello/HelloWorldTest.java[lines=100..108]
----
<1> `channel` 값이 `null` 이면 `NullPointerException` 을 던지는지 확인한다.
<2> 유효한 `WritableByteChannel` 값을 전달한다.
<3> 전달한 채널객체가 반환되는지 확인한다.

=== hello-world-lib

위의 hello-world-api 모듈에 정의된 API를 구현해 볼 모듈이다. 다음과 같이 의존성을 확인해 보자.

[source,text]
----
$ pwd
/.../path/to/.../verbose-java/hello-world-lib

$ mvn dependency:tree -Dscope=compile
...
[INFO] --- maven-dependency-plugin:x.y.z:tree (default-cli) @ hello-world-lib ---
[INFO] com.github.jinahya:hello-world-lib:jar:<version>
[INFO] \- com.github.jinahya:hello-world-api:jar:<version>:compile
...

$
----

==== HelloWorldImpl.java

hello-world-api 모듈에서 정의한 `HelloWorld` 인터페이스를 구현할 클래스이다.

[source,java]
----
public class HelloWorldImpl implements HelloWorld {

    @Override
    public void set(final byte[] array, final int offset) {
        // @todo: implement
    }
}
----

==== HelloWorldImplTest.java

`HelloWorldImpl` 클래스가 올바르게 구현되었는지를 확인하는 테스트 클래스이다.

[source,java]
.HelloWorldImplTest.java
----
public class HelloWorldImplTest {
    // @todo: add test cases for HelloWorldImpl.java
}
----

우리가 앞으로 구현할 `HelloWorldImpl#set(byte[], int)` 메서드를 테스트하기 전에 어떠한 기능들을 테스트해야 할지 미리 정리해 보자.

1. `array`가 `null` 이면 `NullPointerException` 을 던진다.
2. `offset`이 `0`보다 작으면 `IndexOutOfBoundsException`을 던진다.
3. `(offset + HelloWorld.BYTES)`가 `array.length`보다 크면 `IndexOutOfBoundsException`을 던진다.
4. 모든 인자가 유효하다면 `hello, world` 바이트들이 배열(`array`) 의 해당 위치(`offset`)부터 기록된다.

여기서 주의 할 점은 위에서 열거된 순서와 실제 코드에서 구현한 순서가 다를 수도 있다는 것이다. 세 번째 항목은 `array` 와 `offset` 이 모두 유효한 상황에서 검증해야 할 항목이지만 첫 번째 항목과 두번 째 항목은 서로 상관이 없으며 두 항목을 구현한 순서 또한 달라도 상관이 없다.

[source,java]
----
// offset 을 검증하는 코드가 array 를 검증하는 코드보다 먼저 수행된다.
@Override
public void set(final byte[] array, final int offset) {
    if (offset < 0) {
        // @todo: throw IndexOutOfBoundsException
    }
    if (array == null) {
        // @todo: throw NullPointerException
    }
    if (offset + HelloWorld.BYTES > array.length) {
        // @todo: throw IndexOutOfBoundsException
    }
}
----

때문에 첫번째 경우(`array` 가 `null` 인 경우)을 테스트할 때는 두번째 조건에 위배되지 않는 `offset` 값을 사용해야 하며 두번째 경우(`offset` 이 음수인 경우)을 검증할 때는 `array` 의 값으로 `null` 을 사용하면 안된다. 아래 코드는 `array` 가 `null` 인 경우와 `offset` 이 음수인 경우를 한꺼번에 시험한다.

[source,java]
----
@Test
public void do_not_ever_test_like_this() {
    final byte[] array = null;
    final int offset = -1;
    try {
        new HelloWorldImpl().set(array, offset);
    } catch (final NullPointerException npe) {
        // array 를 먼저 확인하는 군!
    } catch (final IndexOutOfBoundsException ioobe) {
        // offset 을 먼저 확인하는 듯?
    }
}
----

이제 위에 열거된 네 개의 조건들에 대한 시험항목들을 작성하자.

[TIP]
====
구현도 하기 전에 시험 항목을 먼저 작성하다구?

테스트 주도 개발(Test-Driven Development, TDD)이라고 하는 방법론을 적용해 보려 한다. 코드가 어떻게 동작해야 하는지에 대한 정확한 요구사항을 바탕으로 최소한의 범위에 한정하는 (그리고 **실패하는**) **시험 항목을 먼저 작성**한 후 그 **시험 항목이 성공할 만큼만 구현/수정** 작업을 수행한다.
====

다음은 `array` 가 `null` 일 경우 `NullPointerException` 을 던지는지 확인하기 위한 시험 항목이다.

[source,java]
.HelloWorldImplTest.java#expectNullPointerExceptionWhenArrayIsNull()
----
    // array가 null이면 NullPointerException을 던져야 한다.
include::codes/hello-world-lib/src/test/java/com/github/jinahya/verbose/hello/HelloWorldImplTest.java[lines=39..44]
----
<1> 해당 항목에 위배되지 않는 `offset` 값을 사용한다.

구현 항목을 작성하기 전에 테스트를 실행해보자.

[source,text]
----
$ pwd
/.../path/to/.../verbose-java/hello-world-lib

$ mvn test
...
Method HelloWorldImplTest.expectNullPointerExceptionWhenArrayIsNull()[...] should have thrown an exception of type class java.lang.NullPointerException
...
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
...

$
----

**실패하였다**. `set(byte[], int)` 메서드에 `array` 의 값으로 `null` 을 전달했지만 `NullPointerException` 을 던지지 않았다. (사실, 아직 아무런 구현도 되어 있지 않다.) 이제 이 시험항목을 만족시키는 구현 항목을 작성하자.

[source,java]
.HelloWorldImpl.java#set(byte[], int)
----
@Override
public void set(final byte[] array, final int offset) {
    if (array == null) {
        throw new NullPointerException("array is null");
    }
    // @todo: implement more
}
----

다시 테스트를 수행해보자.

[source,text]
----
$ pwd
/.../path/to/.../verbose-java/hello-world-lib

$ mvn test
...
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
...

$
----

시험 항목이 수행되고 검증되었다.

이제 `offset` 이 음수인 경우에 대한 시험 항목을 작성하자.

[source,java]
.HelloWorldImplTest.java#expectIndexOutOfBoundsExceptionWhenOffsetIsNegative()
----
    // offset이 0보다 작으면 IndexOutOfBoundsException을 던져야 한다.
include::codes/hello-world-lib/src/test/java/com/github/jinahya/verbose/hello/HelloWorldImplTest.java[lines=50..55]
----
<1> `array` 의 값으로 `null` 이 아닌 값을 사용하였다.

마찬가지로 (아직 해당사항이 구현조차 되어있지 않으므로) 테스트가 실패한다.

[source,text]
----
$ pwd
/.../path/to/.../verbose-java/hello-world-lib

$ mvn test
...
Method HelloWorldImplTest.expectIndexOutOfBoundsExceptionWhenOffsetIsNegative()[...] should have thrown an exception of type class java.lang.IndexOutOfBoundsException
...
Tests run: 2, Failures: 1, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
...

$
----

다음과 같이 해당 항목을 구현하고 다시 테스트를 수행한다.

[source,java]
.HelloWorldImpl.java#set(byte[], int)
----
@Override
public void set(final byte[] array, final int offset) {
    if (array == null) {
        throw new NullPointerException("array is null");
    }
    if (offset < 0) {
        throw new IndexOutOfBoundsException("offset(" + offset + ") < 0");
    }
    // @todo: implement more
}
----

[source,text]
----
$ pwd
/.../path/to/.../verbose-java/hello-world-lib

$ mvn test
...
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
...

$
----

다음은 배열의 공간이 충분치 않을 경우에 대한 시험항목이다.

[source,java]
.HelloWorldImplTest.java#expectIndexOutOfBoundsExceptionWhenCapacityIsNotEnough()
----
    // 충분한 공간이 없으면 IndexOutOfBoundsException을 던져야 한다.
include::codes/hello-world-lib/src/test/java/com/github/jinahya/verbose/hello/HelloWorldImplTest.java[lines=62..67]
----
<1> `null` 이 아닌 값을 사용한다.
<2> 음수가 아닌 값을 사용한다.

실패하자.

[source,text]
----
$ pwd
/.../path/to/.../verbose-java/helo-world-lib

$ mvn test
...
Method HelloWorldImplTest.expectIndexOutOfBoundsExceptionWhenCapacityIsNotEnough()[...] should have thrown an exception of type class java.lang.IndexOutOfBoundsException
...
Tests run: 3, Failures: 1, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
...

$
----

다음과 같이 해당 항목을 구현하고 테스트를 실행한다.

[source,java]
.HelloWorldImpl.java#set(byte[], int)
----
@Override
public void set(final byte[] array, final int offset) {
    if (array == null) {
        throw new NullPointerException("null array");
    }
    if (offset < 0) {
        throw new IndexOutOfBoundsException(
                "offset(" + offset + ") < 0");
    }
    if (offset + HelloWorld.BYTES > array.length) {
        throw new IndexOutOfBoundsException(
                "offset(" + offset + ") + " + HelloWorld.BYTES
                + " > array.length(" + array.length + ")");
    }
    // @todo: implement more
}
----

[source,text]
----
$ pwd
/.../path/to/.../verbose-java/hello-world-lib

$ mvn test
...
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
...

$
----

이제 마지막으로 모든 인자가 유효한 경우에 정상적으로 동작하는 것을 확인하는 시험 항목을 작성하고 (실패하는 것을 확인한 뒤) 해당 항목을 구현하자.

.HelloWorldImplTest#expectHelloWorldBytesSetOnArrayStartingAtOffset()
[source,java]
----
    // 유효한 인자들이 전달되었을 경우, hello, world 바이트들이 array의 offset 부터 기록된다.
include::codes/hello-world-lib/src/test/java/com/github/jinahya/verbose/hello/HelloWorldImplTest.java[lines=73..90]
----
<1> `offset + 0x0` 은 불필요한 작업이다.

실패!

[source,text]
----
$ pwd
/.../path/to/.../verbose-java/hello-world-lib

$ mvn test
...
expectHelloWorldBytesSetOnArrayStartingAtOffset(...)  ...
java.lang.AssertionError: expected [104] but found [0]
        at ....expectHelloWorldBytesSetOnArrayStartingAtOffset(HelloWorldImplTest.java:XX)

...
Tests run: 4, Failures: 1, Errors: 0, Skipped: 0
...
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
...

$
----

구현!

.HelloWorldImpl.java#set(byte[], int)
[source,java]
----
include::codes/hello-world-lib/src/main/java/com/github/jinahya/verbose/hello/HelloWorldImpl.java[lines=31..56]
----
<1> 마지막 `offset++` 은 불필요한 작업이다.

[CAUTION]
====
`offset` 인자에 `final` 키워드를 생략한 다음 그 값을 직접 증가(`++`)시키면서 사용하였다. 좋은 방법이 아니다. 중간에 `offset` 값을 변경하는 코드가 삽입될 경우 정상적으로 동작하지 않는다. 가능한 한 메서드에 전달된 인자들에 `final` 키워드를 사용하여 에러가 발생할 확률을 줄인다.
====

이제 모든 시험 항목들을 실행해보자.

[source,text]
----
$ pwd
/.../path/to/.../verbose-java/hello-world-lib

$ mvn test
...
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
...

$
----

**정의된 모든 항목들이, 그리고 그 항목들만이, 구현되고 검증되었다.**

==== HelloWorldDataProvider.java

지금까지 우리는 `HelloWorldImpl` 클래스의 기능을 시험하기 위해 (각각의 단위 시험 항목에서) 다음과 같은 작업을 수행했다.

- 시험 항목의 목적에 해당하는 `array` 와 `offset` 을 준비한다.
- `HelloWorldImpl` 형의 객체를 하나 생성하고 `set(array, offset)` 메서드를 호출한다.

지금부터는 **단위 시험 항목에서 사용할 데이터를 제공**하는 방법과 **시험을 수행할 객체를 생성**하는 방법에 대해서 알아보려 한다.

TestNG에서 제공하는 데이터 제공자(Data Provider)를 사용하면 시험 항목에 필요한 **데이터를 인자로 제공**받을 수 있을 뿐만 아니라 **1개 이상의 시험 데이터**를 전달받아 여러 경우에 대해 테스트를 실행할 수 있다.

우선 단위 시험항목들에서 사용할 데이터를 제공하는 클래스를 만들어 보자.

[source,java]
.HelloWorldDataProvider.java
----
class HelloWorldDataProvider {
    // @todo: implement
}
----

===== provideArrayNull()

`array` 가 `null` 인 경우를 위한 데이터를 제공하는 메서드이다. (`0` 보다 작지 않은) 유효한 `offset` 값을 제공한다.

[source,java]
.HelloWorldDataProvider.java#provideArrayNull()
----
include::codes/hello-world-lib/src/test/java/com/github/jinahya/verbose/hello/HelloWorldDataProvider.java[lines=36..42]
----
`@org.testng.annotations.DataProvider` 어노테이션을 달아서 데이터 제공자임을 명시하였다.

===== provideOffsetNegative()

다음은 `offset` 이 음수인 경우에 해당하는 데이터를 제공하는 메서드이다. `null` 이 아닌 `array` 값을 제공한다. 다만 `array` 의 크기를 세번째 항목(`offset + BYTES > array.length`)에 위배되지 않는 값으로 설정하였다.

[source,java]
.HelloWorldDataProvider.java#provideOffsetNegative()
----
include::codes/hello-world-lib/src/test/java/com/github/jinahya/verbose/hello/HelloWorldDataProvider.java[lines=49..56]
----

===== provideCapacityNotEnough()

다음은 공간이 충분하지 않은 경우에 대한 데이터를 제공하는 메서드이다. `null` 이 아닌 `array` 와 음수가 아닌 `offset` 을 제공한다.

[source,java]
.HelloWorldDataProvider.java#provideCapacityNotEnough()
----
include::codes/hello-world-lib/src/test/java/com/github/jinahya/verbose/hello/HelloWorldDataProvider.java[lines=63..71]
----
<1> `HelloWorld.BYTES + 0` 은 불필요한 작업이다.

TIP: 데이터 제공자의 반환값은 `Object[][]` 혹은 `Iterator<Object[]>` 형으로 작성해야 한다. 두 경우 모두 실제 시험 항목의 인자들(`Object[]{array, offset}`)을 1개 이상 제공하기 위한 형태이다.

//===== provideValid()

//다음은 유효한 데이터를 제공하는 메서드이다.

//[source,java]
//.HelloWorldDataProvider.java#provideValid()
//----
//include::codes/hello-world-lib/src/test/java/com/github/jinahya/verbose/hello/HelloWorldDataProvider.java[lines=78..85]
//----
//<1> `0` 부터 `15` 까지의 값을 가지는 `IntStream` 에 대하여,
//<2> 각각의 값을 `byte[]` 와 `int` 를 포함하는 `Object[]` 형으로 변환한 후,
//<3> `List` 로 모은(collect) 다음,
//<4> 그 리스트의 `Iterator` 를 반한한다.

==== HelloWorldDataTest.java

`HelloWorldDataProvider` 클래스가 제공하는 데이터를 사용하는 단위 시험 클래스를 작성해보자.

[source,java]
.HelloWorldDataTest.java
----
abstract class HelloWorldDataTest {

    // 각 시험 항목들에서 사용할 HelloWorld 객체를 반환한다.
    abstract HelloWorld implementation();
}
----

추상클래스로 작성되었으며 이 클래스를 확장하는 클래스에서 `implementation()` 메서드를 구현함으로써 `set(byte[], int)` 메서드를 호출할 객체를 제공하도록 하였다.

===== testArrayNull(byte[], int)

우선 `array` 가 `null` 인 경우에 대한 시험 항목을 작성해 보자.

[source,java]
.HelloWorldDataTest#testArrayNull(byte[], int)
----
include::codes/hello-world-lib/src/test/java/com/github/jinahya/verbose/hello/HelloWorldDataTest.java[lines=48..53]
----

`@Test` 어노테이션의 `dataProvider` 요소와 `dataProviderClass` 요소를 이용하여 데이터 제공자를 명시하였다. 시험이 수행될 때 `provideArrayNull` 메서드가 반환하는 시료들(`Object[][]`) 각각이 이 메서드의 인자로 전달된다.

===== testOffsetNegative(byte[], int)

다음은 `offset` 이 음수인 경우에 대한 시험 항목이다.

[source,java]
.HelloWorldDataTest#testOffsetNegative(byte[], int)
----
include::codes/hello-world-lib/src/test/java/com/github/jinahya/verbose/hello/HelloWorldDataTest.java[lines=66..71]
----

===== testCapacityNotEnough(byte[], int)

다음은 공간이 충분하지 않은 경우를 위한 데이터를 사용하는 시험 항목이다.

[source,java]
.HelloWorldDataTest#testCapacityNotEnough(byte[], int)
----
include::codes/hello-world-lib/src/test/java/com/github/jinahya/verbose/hello/HelloWorldDataTest.java[lines=85..90]
----

//===== testValid(byte[], int)
//
//다음은 유효한 인자들(`array`, `offset`)을 데이터로 제공받아 수행되는 시험 항목이다.
//
//[source,java]
//.HelloWorldDataTest#testValid(byte[], int)
//----
//include::codes/hello-world-lib/src/test/java/com/github/jinahya/verbose/hello/HelloWorldDataTest.java[lines=104..121]
//----

데이터 제공자와 단위 시험 항목들이 준비되었다. 이제 `implementation()` 메서드를 구현하는 클래스들를 만들어보자.

====
다음과 같은 방법은 생략한다.
[source,java]
----
public class AwesomeHelloWorldDataTest extends HelloWorldDataTest {
    @Override HelloWorld implementation() {
        return new HelloWorldImpl(); // Awesome!
    }
}
----
====

==== HelloWorldInjectionTest.java

의존성 주입(Dependency injection)이라는 패턴을 사용보려 한다. [https://jcp.org/en/jsr/detail?id=330[JSR 330: Dependency Injection for Java]]에서 정의된 API를 이용한다.

====
hello-world-lib 모듈에는 `HelloWorldImpl` 클래스와 더불어 `HelloWorld` 인터페이스를 구현한 `HelloWorldDemo` 라는 클래스가 있다. 보다 많은 의존성 주입 사례를 위해 우리가 이미 구현한 `HelloWorldImpl` 클래스와 같이 사용한다.

[source,java]
.HelloWorldDemo.java
----
public class HelloWorldDemo implements HelloWorld {

    @Override
    public void set(final byte[] array, final int offset) {
        final byte[] value = "hello, world".getBytes(US_ASCII);
        System.arraycopy(value, 0, array, offset, value.length); // <1>
    }
}
----
<1> {apidocs-javase}/java/lang/System.html#arraycopy-java.lang.Object-int-java.lang.Object-int-int-[System#arraycopy(Object, int, Object, int, int)] 메서드가 `HelloWorld#set(byte[], int)` 메서드의 요구사항에 부합하는지 확인해보자.
====

`HelloWorld` 객체들을 주입받는 클래스를 정의하자.

[source,java]
.HelloWorldInjectionTest.java
--------------------------------------------------------------------------------
abstract class HelloWorldInjectionTest extends HelloWorldDataTest {

    // HelloWorld 형의 객체를 주입받는다.
    @Inject // <1>
    HelloWorld any;

    // "demo" 라는 문자열을 이용하여 HelloWorldDemo 형의 객체를 주입받는다.
    @Inject
    @Named("demo") // <2>
    HelloWorld namedDemo;

    // "impl" 이라는 문자열을 이용하여 HelloWorldImpl 형의 객체를 주입받는다.
    @Inject
    @Named("impl") // <2>
    HelloWorld namedImpl;

    // QualifiedDemo 라는 식별자를 이용하여 HelloWorldDemo 형의 객체를 주입받는다.
    @Inject
    @QualifiedDemo // <3>
    HelloWorld qualifiedDemo;

    // QualifiedImpl 이라는 식별자를 이용하여 HelloWorldImpl 형의 객체를 주입받는다.
    @Inject
    @QualifiedImpl // <3>
    HelloWorld qualifiedImpl;
}
--------------------------------------------------------------------------------
<1> `@javax.inject.Inject` 어노테이션을 사용함으로써 외부로부터 주입된다는 것을 선언하였다. `any` 필드에는 `HelloWorldDemo` 와 `HelloWorldImpl` 중 어느 구현체가 주입될지 알 수 없다.
<2> `namedDemo` 필드와 `namedImpl` 필드에는 `@javax.inject.Named` 어노테이션을 사용하여 미리 약속된 문자열(`"demo"`, `"impl"`)을 통해 원하는 형태의 구현체를 주입받는다.
<3> `qualifedDemo` 필드와 `qualifiedImpl` 필드는 `@javax.inject.Qualifier` 어노테이션이 적용된 별도의 어노테이션들을 사용하여 원하는 형태의 값을 주입받는다.

[NOTE]
====
`@QualifiedDemo` 어노테이션과 `@QualifiedImpl` 어노테이션의 정의는 다음과 갈다.

[source,java]
.QualifiedDemo.java
----
include::codes/hello-world-lib/src/test/java/com/github/jinahya/verbose/hello/QualifiedDemo.java[lines=32..36]
----

[source,java]
.QualifiedImpl.java
----
include::codes/hello-world-lib/src/test/java/com/github/jinahya/verbose/hello/QualifiedImpl.java[lines=32..36]
----
====

이제 다음과 같이 `implementation()` 메서드를 구현하자. 앞서 정의된 다섯개의 필드중 하나를 랜덤으로 반환한다.

[source,java]
.HelloWorldInjectionTest.java#implementation()
--------------------------------------------------------------------------------
    @Override
    HelloWorld implementation() {
        switch (current().nextInt(5)) {
            case 0:
                return any;
            case 1:
                return namedDemo;
            case 2:
                return namedImpl;
            case 3:
                return qualifiedDemo;
            default:
                return qualifiedImpl;
        }
    }
--------------------------------------------------------------------------------

이제 실제로 주입작업을 실행하는 클래스를 만들어 보자. https://github.com/google/guice[Guice] 라는 프레임워크를 사용한다.

Guice를 사용하여 주입작업을 수행하기 위해서는 실제로 주입을 필요로 하는 요소들(필드, 메서드 등)에 따른 주입작업을 설정하는 클래스가 필요하다. `com.google.inject.AbstractModule` 클래스를 확장하는 클래스를 하나 정의하자. 이 클래스는 Guice 프레임워크에 종속적인 API 를 사용한다.

[source,java]
.HelloWorldGuilceModule.java
----
class HelloWorldGuiceModule extends AbstractModule {

    @Override
    protected void configure() {
        // @todo: implement
    }
}
----

아무런 식별자(qualifier)도 붙지 않은 `HelloWorld` 형의 주입 위치에는 `HelloWorldDemo` 와 `HelloWorldImpl` 중 랜덤으로 선택된 형태를 주입한다.

[source,java]
----
include::codes/hello-world-lib/src/test/java-guice/com/github/jinahya/verbose/hello/HelloWorldGuiceModule.java[lines=33..35]
----

`@Named("demo")` 혹은 `@Named("impl")` 이 적용된 주입 위치에는 각각의 약속된 형태를 주입한다.

[source,java]
----
include::codes/hello-world-lib/src/test/java-guice/com/github/jinahya/verbose/hello/HelloWorldGuiceModule.java[lines=36..41]
----

`@QualifiedDemo` 혹은 `@QualifiedImpl` 어노테이션이 적용된 주입 위치들을 구분하여 각각의 형태를 주입한다.

[source,java]
----
include::codes/hello-world-lib/src/test/java-guice/com/github/jinahya/verbose/hello/HelloWorldGuiceModule.java[lines=42..47]
----

이제 위에서 정의한 모듈을 이용하여 주입작업을 수행하는 테스트 클래스를 작성한다. (`HelloWorldGuiceModule` 클래스와 마찬가지로 Guice 프레임워크에 종속적인 API 를 사용한다.)

[source,java]
.HelloWorldGuiceTest.java
----
public class HelloWorldGuiceTest extends HelloWorldInjectionTest {

    @BeforeClass // <1>
    void inject() {
        final Injector injector // <2>
                = Guice.createInjector(new HelloWorldGuiceModule());
        injector.injectMembers(this); // <3>
    }
}
----
<1> 다른 테스트가 수행되기 전에 한 번 수행된다.
<2> `HelloWorldGuiceModule` 객체를 사용하는 `Injector` 를 생성한다.
<3> 주입 위치에 주입 작업을 수행한다.

NOTE: 보통의 경우 주입(injection) 작업은 의존성 주입을 지원하는 컨테이너에서 이루어지지만 여기서는 직접 주입작업을 수행한다.

다음과 같이 실제로 주입작업이 잘 수행되는지 확인해 보자.

[source,text]
----
$ pwd
/.../path/to/.../verbose-java/hello-world-lib

$ mvn -Dtest=HelloWorldGuiceTest test
...

$
----

hello-world-lib 모듈에는 Guice 이외에 [https://jcp.org/en/jsr/detail?id=330[JSR 330: Dependency Injection for Java]] 를 구현한 몆몆 구현체들를 사용하는 별도의 테스트 클래스들이 추가되어 있다.

[cols="1,1,2",options="header"]
.JSR 330 Implementations
|===============================================================================
|framework       |profile  |url
|Dagger          |`dagger` |http://square.github.io/dagger/
|Dagger 2        |`dagger2`|http://google.github.io/dagger/
|HK2             |`hk2`    |https://hk2.java.net/
|Spring Framework|`spring` |http://projects.spring.io/spring-framework/
|===============================================================================

소스코드는 `src/test/java-<profile>` 위치에 있으며 다음과 같이 테스트해 볼 수 있다.

[source,text]
----
$ pwd
/.../path/to/.../verbose-java/hello-world-lib

$ mvn -P<profile> test
...

$
----

==== HelloWorldServiceTest.java

이번에는 자바에서 지원하는 확장 메커니즘을 활용하여 `implementation()` 메서드를 구현해보려 한다. 서비스 확장의 목적은 라이브러리가 수행할 기능을 인터페이스나 추상클래스로 정의(Service Provider Interface)한 후 그 기능을 구현한 제공자(Service Provider)를 선택적으로 사용할 수 있도록 하는 것이다.

[source,java]
.HelloWorldServiceTest.java
----
public class HelloWorldServiceTest extends HelloWorldDataTest {

    @Override
    HelloWorld implementation() {
        return implementation;
    }

    private HelloWorld implementation; // @todo: initialize
}
----

`HelloWorld` 형의 변수를 하나 선언하고 `implementation()` 메서드에서는 그 값을 반환하도록 하였다.

이제 우리가 구현한 `HelloWorldImpl` 클래스가 `HelloWorld` 인터페이스를 구현했다는 사항을 추가하면 된다. `META-INF/services` 디렉토리에 구현한 인터페이스의 이름과 같은 파일을 생성한 후 우리가 구현한 클래스의 이름을 기록한다.

[source,text]
.META-INF/services/com.github.jinahya.verbose.hello.HelloWorld
----
com.github.jinahya.verbose.hello.HelloWorldImpl

----
이제 서비스를 적재하여 `implementation` 변수의 값을 초기화하자.

[source,java]
.HelloWorldServiceTest.java#implementation()
----
    @Override
    HelloWorld implementation() {
        if (implementation == null) {
            final ServiceLoader<HelloWorld> loader // <1>
                    = ServiceLoader.load(HelloWorld.class);
            final Iterator<HelloWorld> iterator = loader.iterator(); // <2>
            try {
                implementation = iterator.next(); // <3>
            } catch (final NoSuchElementException nsee) {
                fail("failed to load an implementation", nsee);
            }
        }
        return implementation;
    }
----
<1> `HelloWorld` 서비스를 적재한다.
<2> 구현체들를 얻기 위한 반복자(`Iterator`)를 얻는다.
<3> 첫번째 구현체를 사용한다.

다음과 같이 테스트를 수행해보자.

[source,text]
----
$ pwd
/.../path/to/.../verbose-java/hello-world-lib

$ mvn -Dtest=HelloWorldServiceTest test
...

$
----

=== hello-world-app

지금까지 우리는 성공적으로 `HelloWorld` 인터페이스를 구현하였다. 상세한 시험 항목을 통해 꼭 필요한 만큼만 구현 작업을 수행한 후 구현한 코드가 의도한데로 그리고 정상적으로 동작하는 것을 확인하였다. 또한 의존성 주입 및 서비스 확장이라는 개념까지 살펴보았다. 이제 직접 구현한 코드를 가지고 본 장 첫 부분에서 보았던 `SuccinctHelloWorld` 프로그램과 동일한 기능을 수행하는 프로그램을 만들 수 있다. 다음과 같이 의존성을 확인해보자.

[source,text]
----
$ pwd
/.../path/to/.../verbose-java/hello-world-app

$ mvn dependency:tree -Dscope=runtime
...
[INFO] com.github.jinahya:hello-world-app:jar:<version>
[INFO] +- com.github.jinahya:hello-world-api:jar:<version>:compile
[INFO] \- com.github.jinahya:hello-world-lib:jar:<version>:runtime
...

$
----

hello-world-app 모듈은 hello-world-api 모듈에 정의된 클래스들만을 사용하고 hello-world-lib 모듈에 정의된 클래스들은 실제로 실행될 때만 사용되로독 설정하였다. 아래는 hello-world-app 모듈의 pom.xml 파일에 정의된 의존성들을 보여준다.

[source,xml]
----
include::codes/hello-world-app/pom.xml[lines=32..45]
----

==== HelloWorldMain.java

우리가 작성한 `HelloWorldImpl` 클래스를 이용하여 `hello, world` 를 `System.out` 에 인쇄하는 프로그램이다. 앞서 구현했던 서비스 확장 기능을 사용한다.

[source,java]
.HelloWorldMain.java
----
public class HelloWorldMain {
include::codes/hello-world-app/src/main/java/com/github/jinahya/verbose/hello/HelloWorldMain.java[lines=25..29]
}
----
<1> `HelloWorld` 객체를 적재한다.
<2> 적재된 `HelloWorld` 객체의 `write(OutputStream)` 메서드에 `System.out` 을 전달한다.
<3> 반환된 값(`System.out`)에 `println()` 을 호출한다.

다음과 같이 실행해 보자.

[source,text]
----
$ pwd
/.../path/to/.../verbose-java/hello-world-app

$ mvn -q compile exec:java
hello, world

$
----

==== Executable JAR

`HelloWorldMain` 클래스를 실행하기 위해서는 hello-world-api 모듈과 hello-world-lib 모듈이 필요하다. hello-world-app 모듈에 `package` 단계(phase)에서 여러가지 방법들을 통해 실행 가능한 jar 파일들을 생성하로록 설정된 사항이 있다.

===== jar-with-dependencies

http://maven.apache.org/plugins/maven-assembly-plugin/[Apache Maven Assembly Plugin] 을 이용해 생성한다. 다음과 같이 실행해 보자.

[source,text]
----
$ pwd
/.../path/to/.../verbose-java/hello-world-app

$ mvn clean package
...

$ java -jar target/hello-world-app-<version>-jar-with-dependencies.jar
hello, world

$
----

===== shaded

https://maven.apache.org/plugins/maven-shade-plugin/[Apache Maven Shade Plugin] 을 이용해 생성한다. 다음과 같이 실행해 보자.

[source,text]
----
$ pwd
/.../path/to/.../verbose-java/hello-world-app

$ mvn clean package
...

$ java -jar target/hello-world-app-<version>-shaded.jar
hello, world

$
----

===== spring-boot

https://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-maven-plugin.html[Spring Boot Maven Plugin] 을 이용해 생성한다. 다음과 같이 실행해 보자.

[source,text]
----
$ pwd
/../path/to/../verbose-java/hello-world-app

$ mvn clean package
...

$ java -jar target/hello-world-app-<version>-spring-boot.jar
hello, world

$
----

===== class-path

실행에 필요한 모듈들을 별도의 디렉토리에 복사한 후 `META-INF/MANIFEST.MF` 항목에 별도의 `Class-Path` 값을 추가하는 방식으로 생성되었다. 다음과 같이 실행해 볼 수 있다.

[source,text]
----
$ pwd
/../path/to/../verbose-java/hello-world-app

$ mvn clean package
...

$ java -jar target/hello-world-app-<version>-class-path.jar
hello, world

$
----

`hello-world-app-<version>-class-path.jar` 파일의 `META-INF/MANIFEST.MF` 항목의 확인해 보자.

[source,text]
----
$ pwd
/../path/to/../verbose-java/hello-world-app

$ unzip -p target/hello-world-app-<version>-class-path.jar META-INF/MANIFEST.MF
...
Class-Path: hello-world-app-<version>-class-path.lib/hello-world-api-<
version>.jar hello-world-app-<version>-class-path.lib/hello-world-lib-
<version>.jar
...

$
----

`hello-world-app-<version>-class-path.lib` 디렉토리에는 `hello-world-app-<version>-class-path.jar` 파일이 수행될 때 필요한 라이브러리들이 들어 있다.
[source,text]
----
$ pwd
/.../path/to/.../verbose-java/hello-world-app

$ ls -1F target/hello-world-app-<version>-class-path.lib/
hello-world-api-<version>.jar
hello-world-lib-<version>.jar

$
----

`hello-world-app-<version>-class-path.jar` 파일은 같은 위치에 `hello-world-app-<version>-class-path.lib` 디렉토리가 필요하다. 별도의 설정을 추가하여 다음과 같이 배포 가능한 어카이브들을 생성하도록 하였다.
[source,text]
----
$ pwd
/.../path/to/.../verbose-java/hello-world-app

$ ls -1F target
...
hello-world-app-<version>-class-path.jar
hello-world-app-<version>-class-path.lib/
hello-world-app-<version>-class-path.tar
hello-world-app-<version>-class-path.tar.bz2
hello-world-app-<version>-class-path.tar.gz
hello-world-app-<version>-class-path.zip
...

$ tar tjf target/hello-world-app-<version>-class-path.tar.bz2
hello-world-app-<version>-class-path.jar
hello-world-app-<version>-class-path.lib/hello-world-api-<version>.jar
hello-world-app-<version>-class-path.lib/hello-world-lib-<version>.jar

$
----

=== Exercises

. `HelloWorldImpl#set(byte[], int)` 의 `offset` 인자에 `final` 키워드를 추가한 다음 부가적으로 발생하는 문제점(들)을 해결하라.
+
[source,java]
.HelloWorldImpl.java#set(byte[], int)
----
public void set(final byte[] array, final int offset) {
}
----

. `HelloWorldImpl#set(byte[], int)` 메서드를 시험하기 위한 유효한 데이터를 제공하는 데이터 제공자와 그로부터 데이터를 제공받아 정상적인 동작을 확인하는 시험 항목을 작성하라.
+
[source,java]
.HeloWorldDataProvider.java#provideValid()
----
    @DataProvider
    static Object[][] provideValid() {
        // @todo: implement
        return null;
    }
----
+
[source,java]
.HeloWorldDataTest.java#testValid(byte[], int)
----
    @Test(dataProvider = "provideValid"
          dataProviderClass = HelloWorldDataProvider.class)
    public void testValid(final byte[] array, final int offset) {
        implementation().set(array, offset);
        // @todo: verify
    }
----

. hello-world-lib 모듈의 `META-INF/services/com...HelloWorld` 파일의 내용을 변경하여 `HelloWorldImpl` 클래스 대신 `HelloWorldDemo` 클래스를 사용하도록 설정한 후 변경작업이 적용되었는지 확인하라.
+
[source,text]
----
$ pwd
/.../path/to/.../verbose-java/hello-world-lib

$ cat src/main/resources/META-INF/services/com.github.jinahya.verbose.hello.HelloWorld
com.github.username.verbose.hello.HelloWorldDemo
#com.github.username.verbose.hello.HelloWorldImpl

$ mvn -Dtest=HelloWorldServiceTest test
...

$
----
