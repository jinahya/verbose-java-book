== Verbose Utilities

=== Copying Streams, Channels, and Files

자바 API 를 이용하여 파일을 복사하는 방법은 꽤나 많은 방법들이 사용되고 있지만 그만큼 부정확한 코드를 생성할 요지도 많은 듯 하다. 우선 `InputStream` 객체에서 `OutputStream` 객체로 데이터를 복사하는 메서드를 정의해 보자.

[source,java]
.IoUtils1.java#copy(InputStream, OutputStream)
----
include::codes/verbose-java-utils/src/main/java/com/github/jinahya/verbose/io/IoUtils1.java[lines=27..35]
----
<1> 버퍼를 하나 생성하고
<2> `input` 객체의 `read(byte[])` 메서드에 버퍼를 전달해서 `-1`(`end-of-stream`) 이 반환되기 전까지
<3> `output` 에 `write(byte[], int, int)` 메서드를 이용해서 기록한다.

****
{apidocs-javase}/java/io/InputStream.html#read-byte:A-[`InputStream#read(byte[\])`] 메서드의 설명을 잘 읽어 본 후 아래 코드에 대해 생각해 보자.
[source,java]
----
        for (int length; (length = input.read(buffer)) > 0; count += length)
----
****

두 파일을 전달받아 복사하는 메서드를 다음과 같이 구현할 수 있다.

[source,java]
.IoUtils1.java#copy(File, File)
----
include::codes/verbose-java-utils/src/main/java/com/github/jinahya/verbose/io/IoUtils1.java[lines=47..54]
----
<1> `flush()` 메서드를 명시적으로 호출하여 모든 데이터가 해당 파일에 기록되는 것을 보장한다.

[TIP]
====
`OutputStream` 객체 혹은 `Writer` 객체에 값을 기록한 후 `close()` 메스드를 호출하기 전에 (혹은 필요한 때마다) `flush()` 메서드를 꼭 호출해서 쌓여(bufferd) 있는 데이터를 밀어내야 한다.
====

[CAUTION]
====
`close()` 메서드가 호출될 때 `flush()` 메서드가 자동으로 호출된다고 믿으면 안된다. 몇몇 `InputStream` 클래스와 `Writer` 클래스를 확장한 클래스들이 `close()` 메서드에서 `flush()` 메서드를 호출하도록 구현되고 (문서에) 기술되었을 뿐, `close()` 메서드를 정의한 {apidocs-javase}/java/lang/AutoCloseable.html[`AutoCloseable`] 인터페이스와 그 인터페이스를 확장한 {apidocs-javase}/java/io/Closeable.html[`Closeable`] 인터페이스 어디에도 `close()` 메서드가 `flush()` 메서드를 호출한다고 기술된 부분이 없다.
====

다음은 `ReadableByteChannel` 객체와 `WritableByteChannel` 객체를 전달 받아 데이터를 복사하는 메서드이다.

[source,java]
.IoUtils2.java#copy1(ReadableByteChannel, WritableByteChannel)
----
include::codes/verbose-java-utils/src/main/java/com/github/jinahya/verbose/io/IoUtils2.java[lines=34..48]
----
<1> `ReadableByteChannel#read(ByteBuffer)` 메서드를 이용해 데이터를 버퍼에 채운다.
<2> 버퍼를 뒤집어 (버퍼에 읽혀진 데이터를) 기록할 수 있는 상태로 만든 후
<3> `WritableByteChannle#write(ByteBuffer)` 메서드에 버퍼를 전달하여 기록한다.
<4> 버퍼에 남아 있는 내용을 앞쪽으로 모은다.
<5> 버퍼에 남아 있는 내용을 모두 기록한다.

****
`copy1(ReadableByteChannel, WritableByteChannel)` 메서드는 `write(ByteBuffer)` 메서드를 한 번만 호출하는 대신 `compact()` 메서드를 사용해서 데이터를 계속 버퍼의 앞쪽으로 모으는 작업을 한다. [참조: http://shop.oreilly.com/product/9780596002886.do[Java NIO, O'Reilly Media]]
****

[source,java]
.IoUtils2.java#copy2(ReadableByteChannel, WritableByteChannel)
----
include::codes/verbose-java-utils/src/main/java/com/github/jinahya/verbose/io/IoUtils2.java[lines=50..63]
----
<1> 버퍼에 읽혀진 모든 데이터를 기록한다.

****
`copy2(ReadableByteChannel, WritableByteChannel)` 메서드는 데이터를 앞쪽으로 모으는 작업(`compact()`)을 하지 않는 대신 버퍼에 데이터가 남아 있을 동안 `write(ByteBuffer)` 메서드를 계속 호출한다. [참조: http://shop.oreilly.com/product/9780596002886.do[Java NIO, O'Reilly Media]]
****

아래는 `java.nio.file.Path` 형의 객체 두개를 전달받아 복사하는 메서드이다.

[source,java]
.IoUtils2.java#copy1(Path,Path)
----
include::codes/verbose-java-utils/src/main/java/com/github/jinahya/verbose/io/IoUtils2.java[lines=76..84]
----
<1> 갱신된 내용이 저장소에 기록되는 것을 보장한다.

[NOTE]
====
{apidocs-javase}/java/nio/channels/FileChannel.html#force-boolean-[`FileChannel#force(boolean)`] 메서드에 `true` 값을 전달하여 데이터뿐만 아니라 변경된 https://docs.oracle.com/javase/tutorial/essential/io/fileAttr.html[메타정보]도 같이 저장되도록 할 수 있다.
====
[NOTE]
====
`FileChannel#force(boolean)` 메서드를 사용하는 대신 `FileChannel#open` 메서드에 {apidocs-javase}/java/nio/file/StandardOpenOption.html#DSYNC[`StandardOpenOption#DSYNC`] 혹을 {apidocs-javase}/java/nio/file/StandardOpenOption.html#DSYNC[`StandardOpenOption#SYNC`] 를 전달하여 자동으로 처리되게끔 할 수도 있다.
====

`FileChannel` 클래스의 {apidocs-javase}/java/nio/channels/FileChannel.html#transferTo-long-long-java.nio.channels.WritableByteChannel-[`transferTo`] 메서드와 {apidocs-javase}/java/nio/channels/FileChannel.html#transferFrom-java.nio.channels.ReadableByteChannel-long-long-[`transferFrom`] 메서드는 OS 수준의 기능을 사용함으로써 버퍼를 사용하여 읽기/쓰기를 반복하는 구문보다 효과적으로 작업을 수행한다.

다음은 `trasferTo` 메서드를 사용해서 파일을 복사하는 메서드이다.

[source,java]
.IoUtils2.java#copy2(Path, Path)
----
include::codes/verbose-java-utils/src/main/java/com/github/jinahya/verbose/io/IoUtils2.java[lines=86..99]
----

다음은 `trasferFrom` 메서드를 사용해서 파일을 복사하는 메서드이다.

[source,java]
.IoUtils2.java#copy2(Path, Path);
----
include::codes/verbose-java-utils/src/main/java/com/github/jinahya/verbose/io/IoUtils2.java[lines=101..114]
----

[CAUTION]
====
{apidocs-javase}/java/nio/channels/FileChannel.html#transferTo-long-long-java.nio.channels.WritableByteChannel-[`FileChannel#transferTo`] 메서드와 {apidocs-javase}/java/nio/channels/FileChannel.html#transferFrom-java.nio.channels.ReadableByteChannel-long-long-[`FileChannel#transferFrom`] 메서드는 `-1` 을 반환하지 않는다.
====

=== Using Message Digests

두 개의 파일이 주어졌을 때 두 파일의 내용이 같은지 어떻게 확인할 수 있을까? 두 파일을 처음부터 끝까지 바이트별로 비교하는 것도 가능한 방법중에 하나일 수 있다. 또 다른 방법은 {apidocs-javase}/java/security/MessageDigest.html[`java.security.MessageDigest`] 클래스를 이용하여 각 파일의 메시지 다이제스트 값을 구한 후 두 값을 비교하는 것이다.

다음은 `InputStream` 객체와 알고리즘 이름을 받아서 메시지 다이제스트 값을 구하는 메서드이다.

[source,java]
.MdUtils1.java#digest1(InputStream, String)
----
include::codes/verbose-java-utils/src/main/java/com/github/jinahya/verbose/security/MdUtils1.java[lines=30..39]
----
<1> `algorithm` 값을 이용하여 `MessageDigest` 객체를 생성한다.
<2> `input` 에서 데이터를 읽은 후 `digest` 객체에 갱신한다.
<3> `digest` 에서 결과값을 구하여 반환한다.

아래 메서드는 {apidocs-javase}/java/security/DigestInputStream.html[`DigestInputStream`] 클래스를 사용한다.

[source,java]
.MdUtils1.java#digest2(InputStream, String)
----
include::codes/verbose-java-utils/src/main/java/com/github/jinahya/verbose/security/MdUtils1.java[lines=41..46]
----
<1> `InputStream` 객체와 `MessageDigest` 객체를 이용하여 `DigestInputStream` 객체를 생성한다.
<2> `DigestInputStream` 의 데이터를 읽는다. (내부적으로 읽힌 데이터가 `digest` 에 갱신된다.)
<3> 결과값을 반환한다.

아래는 파일을 전달 받아 그 파일의 메시지 다이제스트를 반환하는 메서드이다.

[source,java]
.MdUtils1.java#digest(File,String)
----
include::codes/verbose-java-utils/src/main/java/com/github/jinahya/verbose/security/MdUtils1.java[lines=58..63]
----

다음은 `ReadableByteChannel` 객체에서 데이터를 읽어서 메시지 다이제스트를 계산하는 메서드이다.

[source,java]
.MdUtils2.java#digest(ReadableByteChannel, String)
----
include::codes/verbose-java-utils/src/main/java/com/github/jinahya/verbose/security/MdUtils2.java[lines=32..42]
----
<1> `buffer` 에 채워진 데이터를 `digest` 에 갱신한다.

아래는 `Path` 객체를 전달 받아 메시지 다이제스트를 반환하는 메서드이다.

[source,java]
.MdUtils2.java#digest(Path,String)
----
include::codes/verbose-java-utils/src/main/java/com/github/jinahya/verbose/security/MdUtils2.java[lines=53..58]
----
